<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Saved Memories</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        @keyframes fadeGlow {
            0% { box-shadow: 0 0 10px rgba(160, 236, 192, 0.4); }
            50% { box-shadow: 0 0 20px rgba(160, 236, 192, 0.7); }
            100% { box-shadow: 0 0 10px rgba(160, 236, 192, 0.4); }
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #C2FFD8, #465EFB);
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: #333;
        }
        .container {
            background: rgba(255, 255, 255, 0.8);
            border: 2px solid rgba(255, 255, 255, 0.4);
            padding: 30px;
            border-radius: 25px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            width: 500px;
            text-align: center;
            animation: fadeGlow 3s infinite ease-in-out;
        }
        h1 {
            font-size: 26px;
            letter-spacing: 1px;
            text-transform: uppercase;
            color: #2A9D8F;
        }
        .memory-list {
            max-height: 50vh;
            overflow-y: auto;
            padding: 10px;
            background: rgba(255, 255, 255, 0.6);
            border-radius: 15px;
            box-shadow: inset 0 0 10px rgba(255, 255, 255, 0.3);
        }
        .entry {
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 12px;
            margin-bottom: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        .entry:hover {
            transform: scale(1.05);
        }
        .entry p {
            font-size: 14px;
            color: #333;
        }
        .entry span {
            font-size: 12px;
            color: #2A9D8F;
        }
        .clear-btn, .back-btn, .theme-btn {
            background: linear-gradient(135deg, #6A93FF, #56CFE1);
            color: white;
            border: none;
            padding: 12px 15px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 15px;
            transition: all 0.3s;
            box-shadow: 0px 5px 15px rgba(86, 207, 225, 0.5);
        }
        .clear-btn:hover, .back-btn:hover, .theme-btn:hover {
            background: linear-gradient(135deg, #56CFE1, #2A9D8F);
            transform: scale(1.08);
        }
        .dark-mode {
            background: #1a1a2e;
            color: white;
        }
        .dark-mode .container {
            background: rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŒ¿ Saved Memories ðŸŒ¿</h1>
        <button onclick="toggleTheme()" class="theme-btn">ðŸŒ™ Toggle Dark Mode</button>
        <input type="text" id="searchBar" placeholder="Search memories..." onkeyup="searchEntries()">
        <div class="memory-list" id="memoryEntriesContainer"></div>
        <button onclick="clearMemoryEntries()" class="clear-btn">Clear Memories</button>
        <a href="index.html"><button class="back-btn">Back to Journal</button></a>
    </div>

    <script>
        function loadMemoryEntries() {
            let memoryEntries = JSON.parse(localStorage.getItem("memoryEntries")) || [];
            displayEntries(memoryEntries);
        }

        function displayEntries(entries) {
            let memoryContainer = document.getElementById("memoryEntriesContainer");
            memoryContainer.innerHTML = "";
            entries.forEach(entry => {
                let div = document.createElement("div");
                div.className = "entry";
                div.innerHTML = `<p>${entry.text}</p><span>${entry.timestamp}</span>`;
                memoryContainer.appendChild(div);
            });
        }

        function searchEntries() {
            let query = document.getElementById("searchBar").value.toLowerCase();
            let entries = JSON.parse(localStorage.getItem("memoryEntries")) || [];
            let filteredEntries = entries.filter(entry => entry.text.toLowerCase().includes(query));
            displayEntries(filteredEntries);
        }

        function clearMemoryEntries() {
            localStorage.removeItem("memoryEntries");
            loadMemoryEntries();
        }

        function toggleTheme() {
            document.body.classList.toggle("dark-mode");
            localStorage.setItem("theme", document.body.classList.contains("dark-mode") ? "dark" : "light");
        }

        document.addEventListener("DOMContentLoaded", function() {
            loadMemoryEntries();
            if (localStorage.getItem("theme") === "dark") {
                document.body.classList.add("dark-mode");
            }
        });
    </script>
</body>
</html>
